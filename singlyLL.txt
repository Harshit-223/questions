#include<bits/stdc++.h>
using namespace std;

class Node{
	public:
		int data;
		Node* next;
		//constructor
		Node(int data){
			this->data = data;
			this->next = NULL;
		}
		//destructor
		~Node(){
			int value = this->data;
			//memory free
			while(this->next!=NULL){
				delete next;
				this->next = NULL;
			}
			cout << "memory is free for node with data : " << value << endl;
		}
};

void insertAtHead(Node* &head,int d){
	//new node create
	Node* temp = new Node(d);
	temp->next = head;
	head = temp;
}

void insertAtTail(Node* &tail,int d){      //insertion at tail
	Node* temp = new Node(d);
	tail->next = temp;
	tail = temp;
}

void print(Node* &head){            //printing the list
	Node*temp = head;
	while(temp!=NULL){
		cout << temp->data << " ";
		temp = temp->next;
	}
	cout << endl;
}

void insertAtPosition(Node*&tail, Node*&head, int position, int d){   //insertion at position 
	if(position==1){
		insertAtHead(head,d);
		return ;
	}
	
	Node*temp = head;
	int cnt = 1;
	while(cnt<position-1){
		temp = temp->next;
		cnt++;
	}
	Node*nodetoInsert = new Node(d);
	nodetoInsert->next = temp->next;
	temp->next = nodetoInsert;
	
	if(temp->next == NULL){
		insertAtTail(tail,d);
		return;
	}
}

void delete_node(int pos,Node*&head){
	if(pos==1){
		Node*temp = head;
		head = head->next;
		temp->next = NULL;
		delete temp;
	}
	else{
		Node*curr = head;
		Node*prev = NULL;
		
		int cnt =1;
		while(cnt<pos){
			prev = curr;
		    curr = curr->next;
			cnt++; 
		}
		prev->next = curr->next;
		curr->next = NULL;
		delete curr;
	}
}


int main(){
	Node* node1 = new Node(10);
 	Node* head = node1;
 	Node* tail = node1;
//	print(head);
	
	insertAtTail(tail,12);
	
// 	insertAtHead(head,12);
//	print(head);

	insertAtTail(tail,15);
	
// 	insertAtHead(head,15);
    	print(head);
    	
//    insertAtPosition(head,1,22);	
//	print(head);

    insertAtPosition(tail,head,3,13);
    print(head);
    
    insertAtPosition(tail,head,4,14);
    print(head);
    
    delete_node(3,head);
    print(head);
    
    cout << "head :" << head->data << endl;
    cout << "tail :" << tail->data << endl;
}